<?php
declare(strict_types=1);

namespace Test\Unit\Winker\IntegrationPipeline\Domain\Services\Request;

use Psr\Http\Message\StreamInterface;
use Test\TestCase;
use Winker\IntegrationPipeline\Domain\Services\Request\IStreamFactory;

class StreamFactoryTest extends TestCase
{
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function test_can_create_a_stream_from_string()
    {
        /* @var $streamFactory IStreamFactory */
        $streamFactory = $this->container->get(IStreamFactory::class);
        $expectedBody = '{ "field": "value" }';
        $stream = $streamFactory->make($expectedBody);

        $this->assertEquals($expectedBody, $stream);
    }

    public function test_can_create_stream_from_empty_string()
    {
        /* @var $streamFactory IStreamFactory */
        $streamFactory = $this->container->get(IStreamFactory::class);
        $expectedBody = '';
        $stream = $streamFactory->make($expectedBody);

        $this->assertInstanceOf(StreamInterface::class, $stream);
        $this->assertEquals($expectedBody, $stream);
    }

    public function test_can_create_stream_from_null()
    {
        /* @var $streamFactory IStreamFactory */
        $streamFactory = $this->container->get(IStreamFactory::class);
        $stream = $streamFactory->make();

        $this->assertInstanceOf(StreamInterface::class, $stream);
        $this->assertEquals(null, $stream->getContents());
    }
}